{"version":3,"file":"static/js/137.e87fde87.chunk.js","mappings":"wNAGaA,EAAOC,EAAAA,GAAAA,GAAH,kIAQJC,EAAOD,EAAAA,GAAAA,GAAH,kEAKJE,GAAYF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,6L,SCZTI,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,+BACE,SAACR,EAAD,UACGM,EAAOG,KAAI,SAAAC,GAAK,OACf,SAACR,EAAD,WACE,SAACC,EAAD,CAAWQ,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMP,GAArD,SACGG,EAAMK,SAFAL,EAAME,GADF,OAUxB,C,kLCjBKI,EAAQf,EAAAA,GAAAA,IAAH,wHAMLgB,EAAOhB,EAAAA,GAAAA,KAAH,2DAKJiB,EAAQjB,EAAAA,GAAAA,MAAH,8jBA0BLkB,EAAMlB,EAAAA,GAAAA,OAAH,igB,mBCFT,EAjCqB,SAAC,GAAkB,IAAhBmB,EAAe,EAAfA,SACtB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAYA,OACE,SAACP,EAAD,WACE,UAACC,EAAD,CAAMG,SARW,SAAAI,GACnBA,EAAEC,iBAEFL,EAASE,EACV,EAIG,WACE,SAACH,EAAD,CAAKO,KAAK,SAAV,UACE,SAAC,MAAD,OAGF,SAACR,EAAD,CACEQ,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,gBACZC,SAtBa,SAAAN,GACnBD,EAASC,EAAEO,OAAOC,MACnB,EAqBOA,MAAOV,QAKhB,ECKD,EAlCe,WACb,OAA4BD,EAAAA,EAAAA,UAAS,IAArC,eAAOf,EAAP,KAAe2B,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAYF,EAAaG,IAAI,UAEnCC,EAAAA,EAAAA,YAAU,WACHF,IAGL,iBAAC,8GAEsBG,EAAAA,EAAAA,IAAiBH,GAFvC,OAESI,EAFT,OAIGR,EAAUQ,GAJb,gDAMGC,QAAQC,IAAIC,OANf,wDAAD,EASD,GAAE,CAACP,IAMJ,OACE,+BACE,4BACE,SAAC,EAAD,CAAcjB,SAPC,SAAAE,GACnBc,EAAgB,CAAEd,MAAAA,GACnB,KAMK,SAAC,IAAD,CAAYhB,OAAQA,QAI3B,C,mMCpCDuC,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAS,mCAEFC,EAAmB,mCAAG,oGACdF,EAAAA,EAAAA,IAAA,qCAAwCC,IAD1B,cAC3BE,EAD2B,yBAG1BA,EAAKP,KAAKQ,SAHgB,2CAAH,qDAMnBT,EAAgB,mCAAG,WAAMlB,GAAN,uFACXuB,EAAAA,EAAAA,IAAA,+BACOC,EADP,iCACsCxB,EADtC,gCADW,cACxB0B,EADwB,yBAKvBA,EAAKP,KAAKQ,SALa,2CAAH,sDAQhBC,EAAiB,mCAAG,WAAMtC,GAAN,uFACZiC,EAAAA,EAAAA,IAAA,gBAAmBjC,EAAnB,oBAAiCkC,EAAjC,oBADY,cACzBE,EADyB,yBAGxBA,EAAKP,MAHmB,2CAAH,sDAMjBU,EAAiB,mCAAG,WAAMvC,GAAN,uFACZiC,EAAAA,EAAAA,IAAA,gBACRjC,EADQ,4BACckC,EADd,oBADY,cACzBE,EADyB,yBAKxBA,EAAKP,KAAKW,MALc,2CAAH,sDAQjBC,EAAiB,mCAAG,WAAMzC,GAAN,uFACZiC,EAAAA,EAAAA,IAAA,gBACRjC,EADQ,4BACckC,EADd,2BADY,cACzBE,EADyB,yBAKxBA,EAAKP,KAAKQ,SALc,2CAAH,qD","sources":["components/MoviesList/MovieList.styled.jsx","components/MoviesList/MovieList.jsx","components/SearchMovies/SearchMovies.styled.jsx","components/SearchMovies/SearchMovies.jsx","pages/Movies.jsx","services/Api.js"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  list-style: none;\n  margin: 20px 0 0 20px;\n  gap: 10px;\n`;\n\nexport const Item = styled.li`\n  display: inline-block;\n  width: 100%;\n`;\n\nexport const MovieLink = styled(NavLink)`\n  display: inline-block;\n  padding: 5px 16px;\n  color: black;\n  text-decoration: none;\n  border-radius: 4px;\n\n  :hover,\n  :focus {\n    color: #0000ff;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\nimport { List, Item, MovieLink } from './MovieList.styled';\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <>\n      <List>\n        {movies.map(movie => (\n          <Item key={movie.id}>\n            <MovieLink to={`/movies/${movie.id}`} state={{ from: location }}>\n              {movie.title}\n            </MovieLink>\n          </Item>\n        ))}\n      </List>\n    </>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};\n","import styled from 'styled-components';\n\nconst Thumb = styled.div`\n  display: flex;\n  justify-content: center;\n  padding: 10px 0;\n  background-color: #3377ff;\n`;\nconst Form = styled.form`\n  display: flex;\n  width: 450px;\n`;\n\nconst Input = styled.input`\n  display: block;\n  outline: none;\n  position: relative;\n  z-index: 2;\n  width: 100%;\n  height: 20px;\n  padding: 0.375rem 0.75rem;\n  font-family: inherit;\n  font-size: 1rem;\n  font-weight: 400;\n  line-height: 1.5;\n  color: #212529;\n  background-color: #fff;\n  border: 1px solid #bdbdbd;\n  border-left: 0;\n  border-radius: 0.25rem;\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n  transition: border 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:focus,\n  &:hover {\n    border: 2px solid #0000ff;\n    outline: none;\n  }\n`;\nconst Btn = styled.button`\n  display: inline-block;\n  position: relative;\n  color: #a9a9a9;\n  text-align: center;\n  vertical-align: baseline;\n  cursor: pointer;\n  user-select: none;\n  background-color: #fff;\n  border: 1px solid #bdbdbd;\n  padding: 0.375rem 0.75rem;\n  font-size: 1rem;\n  border-radius: 0.25rem;\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n  border-right: 0;\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:focus,\n  &:hover {\n    color: #0000ff;\n  }\n`;\n\nexport { Thumb, Form, Input, Btn };\n","import { useState } from 'react';\nimport { Thumb, Form, Input, Btn } from './SearchMovies.styled';\nimport { AiOutlineSearch } from 'react-icons/ai';\n\nconst SearchMovies = ({ onSubmit }) => {\n  const [query, setQuery] = useState('');\n\n  const handleChange = e => {\n    setQuery(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    onSubmit(query);\n  };\n\n  return (\n    <Thumb>\n      <Form onSubmit={handleSubmit}>\n        <Btn type=\"submit\">\n          <AiOutlineSearch />\n        </Btn>\n\n        <Input\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies\"\n          onChange={handleChange}\n          value={query}\n        />\n      </Form>\n    </Thumb>\n  );\n};\n\nexport default SearchMovies;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchSearchMovie } from 'services/Api';\nimport { MoviesList } from 'components/MoviesList/MovieList';\nimport SearchMovies from 'components/SearchMovies/SearchMovies';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieName = searchParams.get('query');\n\n  useEffect(() => {\n    if (!movieName) {\n      return;\n    }\n    (async () => {\n      try {\n        const data = await fetchSearchMovie(movieName);\n\n        setMovies(data);\n      } catch {\n        console.log(Error);\n      }\n    })();\n  }, [movieName]);\n\n  const handleSearch = query => {\n    setSearchParams({ query });\n  };\n\n  return (\n    <>\n      <div>\n        <SearchMovies onSubmit={handleSearch} />\n        <MoviesList movies={movies} />\n      </div>\n    </>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst apiKey = '3cf4425b2b0aaed10ba0111b9a0340c9';\n\nexport const fetchTrendingMovies = async () => {\n  const resp = await axios.get(`trending/movie/day?api_key=${apiKey}`);\n\n  return resp.data.results;\n};\n\nexport const fetchSearchMovie = async query => {\n  const resp = await axios.get(\n    `search/movie?api_key=${apiKey}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n\n  return resp.data.results;\n};\n\nexport const fetchMovieDetails = async id => {\n  const resp = await axios.get(`movie/${id}?api_key=${apiKey}&language=en-US`);\n\n  return resp.data;\n};\n\nexport const fetchMovieCredits = async id => {\n  const resp = await axios.get(\n    `movie/${id}/credits?api_key=${apiKey}&language=en-US`\n  );\n\n  return resp.data.cast;\n};\n\nexport const fetchMovieReviews = async id => {\n  const resp = await axios.get(\n    `movie/${id}/reviews?api_key=${apiKey}&language=en-US&page=1`\n  );\n\n  return resp.data.results;\n};\n"],"names":["List","styled","Item","MovieLink","NavLink","MoviesList","movies","location","useLocation","map","movie","to","id","state","from","title","Thumb","Form","Input","Btn","onSubmit","useState","query","setQuery","e","preventDefault","type","autoComplete","autoFocus","placeholder","onChange","target","value","setMovies","useSearchParams","searchParams","setSearchParams","movieName","get","useEffect","fetchSearchMovie","data","console","log","Error","axios","apiKey","fetchTrendingMovies","resp","results","fetchMovieDetails","fetchMovieCredits","cast","fetchMovieReviews"],"sourceRoot":""}